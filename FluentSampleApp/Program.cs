using System;
using FluentNHSampleApp.Domain;
using FluentNHSampleApp.Mapping;
using FluentNHSampleApp.Mapping.Overrides;
using FluentNHibernate.Automapping;
using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Tool.hbm2ddl;
using Environment = NHibernate.Cfg.Environment;

namespace FluentNHSampleApp
{
    internal class Program
    {
        /// <summary>
        /// Note:
        /// Before running this code make sure you have a database named 'nhtest' in you local\sqlExpress server.
        /// Or else go to app.config and change the connection string to any database of your liking.
        /// You still need to create the database as SchemaExport does not create it, only fills it with schema.
        /// </summary>
        private static void Main()
        {
            Configuration configuration = ConfigureNHibernate();

            Console.WriteLine("Generating the schema");
            new SchemaExport(configuration).Create(true, true);

            Console.WriteLine("Persiting some objects");
            using (ISessionFactory sf = configuration.BuildSessionFactory())
            using (ISession s = sf.OpenSession())
            using (ITransaction tx = s.BeginTransaction())
            {
                var product = new Product
                                  {
                                      Name = "Fideos",
                                      Customizations =
                                          {
                                              new Customization
                                                  {
                                                      Name = "Tuco",
                                                      PossibleValues = {"Pocon", "Medio", "Sopa"}
                                                  }
                                          }
                                  };

                s.Save(product);

                tx.Commit();
            }
        }

        private static Configuration ConfigureNHibernate()
        {
            FluentConfiguration fluentConfig = Fluently.Configure()
                .Mappings(
                    m => m.AutoMappings // Use mapping by convention.
                             // Map all types in current assembly 
                             //     using default options from StoreConfiguration class.
                             .Add(AutoMap.AssemblyOf<Program>(new StoreConfiguration())
                                      // Add our specific defaults for Cascade, etc...
                                      .Conventions.Add<CollectionConvention>()
                                      // Add 'Order' class exceptions to the convention.
                                      // The line itself adds any conventions in assembly, 
                                      //    which is not the only option we have.
                                      .UseOverridesFromAssembly(typeof (OrderOverride).Assembly))
                             // Display the mappings XML in the console.
                             // Typically you should do little XML stuff to output that.
                             // It can also output to text file by specifying path.
                             .ExportTo(Console.Out)
                )
                .Database(() =>
                          MsSqlConfiguration.MsSql2008 // Use SQL Server 2008 Dialect
                              .ConnectionString( // Use connection string from app/web.config
                              c => c.FromConnectionStringWithKey("NHibernateTest"))
                              .ShowSql() // Display SQL generated by NH in console.
                              .FormatSql() // Format / Tabify SQL in console for readability.
                              // Auto escape names of tables for safe naming.
                              //    In SQL Server, this uses '[', and ']' not quotes.
                              // It's worth mentioning: 'Raw' allows us to add config
                              //     values as key/value strings like XML mappings, 
                              //    and Environment Hbm2DDLKeyWords are NH classes not FNH
                              .Raw(Environment.Hbm2ddlKeyWords,
                                   Hbm2DDLKeyWords.AutoQuote.ToString())
                )
                // Use Jose's collection factory.
                // This enables us to use .NET 4.0 HashSet not custom Set types.
                .CollectionTypeFactory<Net4CollectionTypeFactory>();

            // All this was done using Fluent NHibernate object to build config
            // So, now build the actual NHibernate Configuration object.
            return fluentConfig.BuildConfiguration();
        }
    }
}